---
import Layout from "../layouts/Layout.astro";
import Variables from "../components/Variables.astro";
import Favorites from "../components/Favorites.astro";
import ColorWrapper from "../components/ColorWrapper.astro";
---

<!--TO DO:
- Make Layout nicer
- Add functions for different scheme styles (i.e. scale, domain)
- Clean up copy function, shouldn't be 3 diff functions for the same task
- Clean up output function
- Add section for hand picked favorites
- Allow user to copy individual HEX box codes
- Add area for graidents -->
<Layout title="Easy Color Schemes.">
  <main>
    <h1 style="text-align:center; margin-bottom:20px;">
      Easy <span class="text-gradient">Color Schemes</span>
    </h1>
    <div style="text-align: center">
      <button style="padding:16px;" onclick="randomizeColor()">Randomzie</button
      >
    </div>

    <br />
    <Variables />
    <!-- <Favorites />
    <ColorWrapper /> -->
  </main>
</Layout>

<script is:inline>
  //Function to generate a color scheme based on a base color
  function generateColorScheme(baseColor, mode = "lch", numberOfColors = 5) {
    const color = chroma(baseColor);
    const colors = [color];

    for (let i = 1; i < numberOfColors; i++) {
      const newColor = color.set(mode + ".h", `+${(360 / numberOfColors) * i}`);
      colors.push(newColor);
    }

    return colors.map((color) => color.hex());
  }

  // Usage example:
  const baseColor = "#0acd00";
  const colorScheme = generateColorScheme(baseColor);
  console.log(colorScheme);

  // Output:
  // [ '#3498db', '#4b9bda', '#62a0d9', '#79a5d8', '#90aad7' ]

  document.getElementById("color-scheme").innerHTML = colorScheme
    .map(
      (color) =>
        `<div style="background-color: ${color}; width: 160px; height: 100px; cursor: pointer"><p class="hex-div" style="margin: 0;text-align:center; font-size:14px; line-height:100px;">${color}</p></div>`
    )
    .join("");

  //Set the colors to css variables by appending $ to the color name and listing them as base, secondary, tertiary, etc.
  document.getElementById("color-scheme-css-variables").innerHTML = colorScheme
    .map((color, index) => `--color-${index}: ${color};<br />`)
    .join("");

  //Set the colors to css variables by appending $ to the color name and listing them as base, secondary, tertiary, etc.
  document.getElementById("color-scheme-scss-variables").innerHTML = colorScheme
    .map((color, index) => `$color-${index}: ${color};<br />`)
    .join("");

  //Set the colors to css variables by appending $ to the color name and listing them as base, secondary, tertiary, etc.
  document.getElementById("color-scheme-sass-variables").innerHTML = colorScheme
    .map((color, index) => `$color-${index}: ${color}<br />`)
    .join("");

  //Fuction to randomize the base color and rerun the color scheme
  function randomizeColor() {
    const color = chroma.random();
    const colorScheme = generateColorScheme(color);
    document.getElementById("color-scheme").innerHTML = colorScheme
      .map(
        (color) =>
          `<div style="background-color: ${color}; cursor: pointer; width: 160px; height: 100px;"><p class="hex-div"  style="margin: 0;text-align:center; font-size:14px; line-height:100px;">${color}</p></div>`
      )
      .join("");

    //Set the colors to css variables by appending $ to the color name and listing them as base, secondary, tertiary, etc.
    document.getElementById("color-scheme-css-variables").innerHTML =
      colorScheme
        .map((color, index) => `--color-${index}: ${color};<br />`)
        .join("");

    //Set the colors to css variables by appending $ to the color name and listing them as base, secondary, tertiary, etc.
    document.getElementById("color-scheme-scss-variables").innerHTML =
      colorScheme
        .map((color, index) => `$color-${index}: ${color};<br />`)
        .join("");

    //Set the colors to css variables by appending $ to the color name and listing them as base, secondary, tertiary, etc.
    document.getElementById("color-scheme-sass-variables").innerHTML =
      colorScheme
        .map((color, index) => `$color-${index}: ${color}<br />`)
        .join("");
  }
  function copyCSS() {
    const div = document.getElementById("color-scheme-css-variables");
    const text = div.textContent || div.innerText;

    const textArea = document.createElement("textarea");
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand("copy");
    document.body.removeChild(textArea);
  }
  function copySCSS() {
    const div = document.getElementById("color-scheme-scss-variables");
    const text = div.textContent || div.innerText;

    const textArea = document.createElement("textarea");
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand("copy");
    document.body.removeChild(textArea);
  }
  function copySass() {
    const div = document.getElementById("color-scheme-sass-variables");
    const text = div.textContent || div.innerText;

    const textArea = document.createElement("textarea");
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand("copy");
    document.body.removeChild(textArea);
  }

  //Clicking on .hex-div copies the inner text to the clipboard
  document.addEventListener("click", function (e) {
    if (e.target && e.target.classList.contains("hex-div")) {
      const text = e.target.innerText;
      const textArea = document.createElement("textarea");
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand("copy");
      document.body.removeChild(textArea);
    }
  });

  //Once a .hex-div is clicked, pop up to let user know it was copied by replacing the .hex-div text with copied for 2 seconds then reverting back to the original text
  document.addEventListener("click", function (e) {
    if (e.target && e.target.classList.contains("hex-div")) {
      const text = e.target.innerText;
      e.target.innerText = "Copied!";
      setTimeout(function () {
        e.target.innerText = text;
      }, 1000);
    }
  });
</script>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 800px;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  button {
    margin-bottom: 20px;
  }

  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
</style>
